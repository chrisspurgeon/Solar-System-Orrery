#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
#include "String.h"
#include <avr/pgmspace.h>
#include <DS3231.h>





DS3231 clock;
RTCDateTime dt;

#define DS1307_I2C_ADDRESS 0x68


// called this way, it uses the default address 0x40
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();
// you can also call it with a different address you want
//Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(0x41);

// Depending on your servo make, the pulse width min and max may vary, you 
// want these to be as small/large as possible without hitting the hard stop
// for max range. You'll have to tweak them as necessary to match the servos you
// have!
#define SERVOMIN  150 // this is the 'minimum' pulse length count (out of 4096)
#define SERVOMAX  600 // this is the 'maximum' pulse length count (out of 4096)
#define PLANETUP  375 // Halfway between SERVOMIN and SERVOMAX




int lastSecond = 0;
int pos = 0;
int UP = SERVOMAX;
int DOWN = SERVOMIN;

long convertedDate;
long lastEvent;
unsigned long horizonTimeLong;


// our servo # counter
uint8_t servonum = 0;


// the length arrays are as follows:
// { data array length, servo number, planet down position, planet up position, current planet position}

int sunParams[] = { 198, 0, 150, 375, 0 };
int mercuryParams[] = { 198, 0, 150, 375, 0 };
int venusParams[] = { 198, 0, 150, 375, 0 };
int moonParams[] = { 161, 0, 150, 375, 0 };
int marsParams[] = { 198, 0, 150, 375, 0 };
int jupiterParams[] = { 198, 0, 150, 375, 0 };
int saturnParams[] = { 198, 0, 150, 375, 0 };
int uranusParams[] = { 198, 0, 150, 375, 0 };
int neptuneParams[] = { 198, 0, 150, 375, 0 };
int plutoParams[] = { 198, 0, 150, 375, 0 };

const PROGMEM uint32_t sun[] = {
  1604240232, 1604241311, 1604250232, 1604251310, 1604260233, 1604261309, 1604270234, 1604271308, 1604280235, 1604281307, 1604290236, 1604291306, 1604300236, 1604301305, 
  1605010237, 1605011304, 1605020238, 1605021303, 1605030239, 1605031302, 1605040240, 1605041301, 1605050240, 1605051300, 1605060241, 1605061259, 1605070242, 1605071258, 1605080243, 1605081257, 1605090243, 1605091256, 1605100244, 1605101255, 1605110245, 1605111254, 1605120246, 1605121254, 1605130247, 1605131253, 1605140247, 1605141252, 1605150248, 1605151251, 1605160249, 1605161251, 1605170250, 1605171250, 1605180250, 1605181249, 1605190251, 1605191249, 1605200252, 1605201248, 1605210252, 1605211247, 1605220253, 1605221247, 1605230254, 1605231246, 1605240255, 1605241246, 1605250255, 1605251245, 1605260256, 1605261245, 1605270257, 1605271245, 1605280257, 1605281244, 1605290258, 1605291244, 1605300259, 1605301243, 1605310259, 1605311243, 
  1606010300, 1606011243, 1606020300, 1606021243, 1606030301, 1606031242, 1606040301, 1606041242, 1606050302, 1606051242, 1606060303, 1606061242, 1606070303, 1606071242, 1606080304, 1606081241, 1606090304, 1606091241, 1606100305, 1606101241, 1606110305, 1606111241, 1606120305, 1606121241, 1606130306, 1606131241, 1606140306, 1606141241, 1606150307, 1606151241, 1606160307, 1606161242, 1606170307, 1606171242, 1606180307, 1606181242, 1606190308, 1606191242, 1606200308, 1606201242, 1606210308, 1606211242, 1606220308, 1606221243, 1606230309, 1606231243, 1606240309, 1606241243, 1606250309, 1606251244, 1606260309, 1606261244, 1606270309, 1606271244, 1606280309, 1606281245, 1606290309, 1606291245, 1606300309, 1606301245, 
  1607010309, 1607011246, 1607020309, 1607021246, 1607030309, 1607031247, 1607040309, 1607041247, 1607050309, 1607051248, 1607060309, 1607061248, 1607070308, 1607071249, 1607080308, 1607081249, 1607090308, 1607091250, 1607100308, 1607101250, 1607110307, 1607111251, 1607120307, 1607121252, 1607130307, 1607131252, 1607140306, 1607141253, 1607150306, 1607151253, 1607160305, 1607161254, 1607170305, 1607171255, 1607180304, 1607181255, 1607190304, 1607191256, 1607200303, 1607201257, 1607210303, 1607211257, 1607220302, 1607221258, 1607230302, 1607231259, 1607240301, 1607241259, 1607250300, 1607251300, 1607260259, 1607261301, 1607270259, 1607271302, 1607280258, 1607281302, 1607290257, 1607291303, 1607300256, 1607301304, 1607310256, 1607311304
};

const PROGMEM uint32_t mercury[] = {
  1604240405, 1604241356, 1604250403, 1604251353, 1604260400, 1604261351, 1604270357, 1604271348, 1604280353, 1604281344, 1604290349, 1604291341, 1604300344, 1604301337, 
  1605010339, 1605011333, 1605020334, 1605021329, 1605030328, 1605031325, 1605040321, 1605041321, 1605050315, 1605051317, 1605060308, 1605061312, 1605070301, 1605071307, 1605080254, 1605081303, 1605090246, 1605091258, 1605100239, 1605101253, 1605110231, 1605111249, 1605120224, 1605121244, 1605130217, 1605131240, 1605140210, 1605141235, 1605150203, 1605151231, 1605160156, 1605161226, 1605170150, 1605171222, 1605180144, 1605181218, 1605190138, 1605191214, 1605200133, 1605201211, 1605210128, 1605211207, 1605220124, 1605221204, 1605230120, 1605231200, 1605240116, 1605241157, 1605250112, 1605251154, 1605260109, 1605261151, 1605270107, 1605271149, 1605280105, 1605281146, 1605290103, 1605291144, 1605300101, 1605301142, 1605310100, 1605311140, 
  1606010059, 1606011138, 1606020059, 1606021136, 1606030058, 1606031134, 1606040058, 1606041133, 1606050059, 1606051132, 1606060100, 1606061131, 1606070101, 1606071130, 1606080102, 1606081129, 1606090104, 1606091129, 1606100106, 1606101128, 1606110108, 1606111128, 1606120110, 1606121128, 1606130113, 1606131128, 1606140116, 1606141129, 1606150119, 1606151129, 1606160122, 1606161130, 1606170126, 1606171131, 1606180130, 1606181132, 1606190134, 1606191134, 1606200139, 1606201136, 1606210144, 1606211138, 1606220148, 1606221140, 1606230154, 1606231143, 1606240159, 1606241146, 1606250204, 1606251149, 1606260210, 1606261152, 1606270216, 1606271156, 1606280221, 1606281200, 1606290227, 1606291205, 1606300233, 1606301209, 
  1607010239, 1607011214, 1607020245, 1607021220, 1607030251, 1607031225, 1607040256, 1607041231, 1607050302, 1607051236, 1607060307, 1607061242, 1607070312, 1607071248, 1607080317, 1607081254, 1607090322, 1607091301, 1607100326, 1607101307, 1607110330, 1607111313, 1607120334, 1607121319, 1607130338, 1607131325, 1607140341, 1607141331, 1607150344, 1607151337, 1607160347, 1607161343, 1607170350, 1607171349, 1607180352, 1607181355, 1607190354, 1607191400, 1607200356, 1607201405, 1607210358, 1607211411, 1607220359, 1607221416, 1607230401, 1607231421, 1607240402, 1607241425, 1607250402, 1607251430, 1607260403, 1607261434, 1607270404, 1607271439, 1607280404, 1607281443, 1607290404, 1607291447, 1607300404, 1607301451, 1607310404, 1607311454
};

const PROGMEM uint32_t venus[] = {
  1604240133, 1604241246, 1604250135, 1604251245, 1604260137, 1604261244, 1604270139, 1604271244, 1604280141, 1604281243, 1604290143, 1604291243, 1604300145, 1604301242, 
  1605010147, 1605011241, 1605020149, 1605021241, 1605030151, 1605031240, 1605040153, 1605041240, 1605050155, 1605051240, 1605060157, 1605061239, 1605070159, 1605071239, 1605080201, 1605081238, 1605090203, 1605091238, 1605100205, 1605101238, 1605110207, 1605111237, 1605120209, 1605121237, 1605130211, 1605131237, 1605140213, 1605141237, 1605150215, 1605151236, 1605160217, 1605161236, 1605170219, 1605171236, 1605180221, 1605181236, 1605190224, 1605191236, 1605200226, 1605201236, 1605210228, 1605211236, 1605220230, 1605221236, 1605230232, 1605231236, 1605240234, 1605241237, 1605250236, 1605251237, 1605260238, 1605261237, 1605270240, 1605271237, 1605280242, 1605281238, 1605290244, 1605291238, 1605300246, 1605301239, 1605310248, 1605311239, 
  1606010250, 1606011240, 1606020252, 1606021240, 1606030254, 1606031241, 1606040256, 1606041241, 1606050258, 1606051242, 1606060300, 1606061243, 1606070302, 1606071244, 1606080304, 1606081244, 1606090306, 1606091245, 1606100307, 1606101246, 1606110309, 1606111247, 1606120311, 1606121248, 1606130313, 1606131249, 1606140315, 1606141251, 1606150316, 1606151252, 1606160318, 1606161253, 1606170319, 1606171254, 1606180321, 1606181256, 1606190323, 1606191257, 1606200324, 1606201258, 1606210325, 1606211300, 1606220327, 1606221301, 1606230328, 1606231303, 1606240330, 1606241304, 1606250331, 1606251306, 1606260332, 1606261307, 1606270333, 1606271309, 1606280334, 1606281311, 1606290336, 1606291313, 1606300337, 1606301314, 
  1607010338, 1607011316, 1607020339, 1607021318, 1607030339, 1607031320, 1607040340, 1607041322, 1607050341, 1607051324, 1607060342, 1607061325, 1607070343, 1607071327, 1607080343, 1607081329, 1607090344, 1607091331, 1607100345, 1607101333, 1607110345, 1607111335, 1607120346, 1607121337, 1607130346, 1607131339, 1607140346, 1607141341, 1607150347, 1607151343, 1607160347, 1607161346, 1607170347, 1607171348, 1607180347, 1607181350, 1607190348, 1607191352, 1607200348, 1607201354, 1607210348, 1607211356, 1607220348, 1607221358, 1607230348, 1607231400, 1607240348, 1607241402, 1607250348, 1607251404, 1607260347, 1607261406, 1607270347, 1607271408, 1607280347, 1607281411, 1607290347, 1607291413, 1607300347, 1607301415, 1607310346, 1607311417
};

const PROGMEM uint32_t moon[] = {
  1604241457, 1604250455, 1604251539, 1604260547, 1604261625, 1604270638, 1604271714, 1604280727, 1604281808, 1604290813, 1604291906, 1604300857, 1604302006, 1605010939, 1605012109, 1605021019, 1605022214, 1605031100, 1605032321, 1605041140, 1605050030, 1605051223, 1605060140, 1605061308, 1605070250, 1605071357, 1605080358, 1605081450, 1605090503, 1605091546, 1605100602, 1605101645, 1605110655, 1605111744, 1605120742, 1605121843, 1605130824, 1605131940, 1605140901, 1605142036, 1605150935, 1605152131, 1605161008, 1605162224, 1605171039, 1605172317, 1605181111, 1605190010, 1605191144, 1605200104, 1605201219, 1605210157, 1605211256, 1605220251, 1605221337, 1605230344, 1605231422, 1605240436, 1605241511, 1605250525, 1605251603, 1605260612, 1605261659, 1605270657, 1605271758, 1605280738, 1605281859, 1605290818, 1605292001, 1605300857, 1605302105, 1605310936, 1605312211, 1606011016, 1606012318, 1606021058, 1606030027, 1606031144, 1606040136, 1606041234,
  1606050242, 1606051329, 1606060345, 1606061427, 1606070443, 1606071528, 1606080534, 1606081628, 1606090619, 1606091728, 1606100659, 1606101826, 1606110735, 1606111922, 1606120809, 1606122017, 1606130841, 1606132110, 1606140913, 1606142203, 1606150945, 1606152257, 1606161019, 1606162350, 1606171055, 1606180044, 1606181135, 1606190138, 1606191218, 1606200231, 1606201306, 1606210322, 1606211358, 1606220411, 1606221454, 1606230457, 1606231552, 1606240540, 1606241653, 1606250620, 1606251755, 1606260659, 1606261857, 1606270737, 1606272001, 1606280815, 1606282106, 1606290855, 1606292212, 1606300938, 1606302318, 1607011024, 1607020025, 1607021115, 1607030128, 1607031211, 1607040228, 1607041310, 1607050323, 1607051411, 1607060411, 1607061512, 1607070454, 1607071612, 1607080533, 1607081710, 1607090608, 1607091806, 1607100641, 1607101901, 1607110714, 1607111955, 1607120746, 1607122048, 1607130819, 1607132141, 1607140854, 1607142235, 1607150932, 1607152328, 1607161013 
};

const PROGMEM uint32_t mars[] = {
  1604241510, 1604250505, 1604251505, 1604260501, 1604261501, 1604270457, 1604271456, 1604280452, 1604281452, 1604290448, 1604291447, 1604300443, 1604301442, 
  1605010439, 1605011437, 1605020434, 1605021433, 1605030429, 1605031428, 1605040424, 1605041423, 1605050420, 1605051418, 1605060415, 1605061413, 1605070410, 1605071408, 1605080405, 1605081403, 1605090400, 1605091358, 1605100355, 1605101353, 1605110349, 1605111348, 1605120344, 1605121343, 1605130339, 1605131337, 1605140334, 1605141332, 1605150328, 1605151327, 1605160323, 1605161321, 1605170318, 1605171316, 1605180312, 1605181311, 1605190307, 1605191305, 1605200301, 1605201300, 1605210256, 1605211255, 1605220251, 1605221249, 1605230245, 1605231244, 1605240240, 1605241239, 1605250234, 1605251233, 1605260228, 1605261228, 1605270223, 1605271223, 1605280217, 1605281217, 1605290212, 1605291212, 1605300206, 1605301207, 1605310201, 1605311201, 
  1606010155, 1606011156, 1606020150, 1606021151, 1606030145, 1606031146, 1606040139, 1606041140, 1606050134, 1606051135, 1606060129, 1606061130, 1606070123, 1606071125, 1606080118, 1606081120, 1606090113, 1606091115, 1606100108, 1606101110, 1606110103, 1606111105, 1606120057, 1606121100, 1606130052, 1606131055, 1606140048, 1606141050, 1606150043, 1606151046, 1606160038, 1606161041, 1606170033, 1606171036, 1606180028, 1606181032, 1606190024, 1606191027, 1606200019, 1606201023, 1606210015, 1606211018, 1606220010, 1606221014, 1606230006, 1606231009, 1606240001, 1606241005, 1606242357, 1606251001, 1606252353, 1606260957, 1606262349, 1606270952, 1606272345, 1606280948, 1606282341, 1606290944, 1606292337, 1606300940, 1606302333, 
  1607010936, 1607012329, 1607020932, 1607022326, 1607030929, 1607032322, 1607040925, 1607042318, 1607050921, 1607052315, 1607060917, 1607062311, 1607070914, 1607072308, 1607080910, 1607082305, 1607090906, 1607092301, 1607100903, 1607102258, 1607110859, 1607112255, 1607120856, 1607122252, 1607130852, 1607132249, 1607140849, 1607142246, 1607150846, 1607152243, 1607160842, 1607162240, 1607170839, 1607172237, 1607180836, 1607182234, 1607190833, 1607192232, 1607200830, 1607202229, 1607210827, 1607212226, 1607220824, 1607222224, 1607230821, 1607232221, 1607240818, 1607242219, 1607250815, 1607252216, 1607260812, 1607262214, 1607270809, 1607272212, 1607280806, 1607282209, 1607290803, 1607292207, 1607300801, 1607302205, 1607310758, 1607312203
};

const PROGMEM uint32_t jupiter[] = {
  1604241108, 1604242218, 1604251104, 1604252214, 1604261059, 1604262209, 1604271055, 1604272205, 1604281051, 1604282201, 1604291047, 1604292157, 1604301043, 1604302153, 
  1605011039, 1605012149, 1605021035, 1605022145, 1605031031, 1605032141, 1605041027, 1605042137, 1605051023, 1605052133, 1605061019, 1605062129, 1605071015, 1605072125, 1605081011, 1605082121, 1605091007, 1605092117, 1605101004, 1605102113, 1605111000, 1605112109, 1605120956, 1605122105, 1605130952, 1605132102, 1605140948, 1605142058, 1605150944, 1605152054, 1605160940, 1605162050, 1605170936, 1605172046, 1605180932, 1605182042, 1605190928, 1605192039, 1605200925, 1605202035, 1605210921, 1605212031, 1605220917, 1605222027, 1605230913, 1605232024, 1605240909, 1605242020, 1605250905, 1605252016, 1605260902, 1605262013, 1605270858, 1605272009, 1605280854, 1605282005, 1605290850, 1605292002, 1605300846, 1605301958, 1605310843, 1605311954, 
  1606010839, 1606011951, 1606020835, 1606021947, 1606030831, 1606031944, 1606040828, 1606041940, 1606050824, 1606051936, 1606060820, 1606061933, 1606070816, 1606071929, 1606080813, 1606081926, 1606090809, 1606091922, 1606100805, 1606101919, 1606110801, 1606111915, 1606120758, 1606121912, 1606130754, 1606131908, 1606140750, 1606141905, 1606150747, 1606151901, 1606160743, 1606161858, 1606170739, 1606171855, 1606180736, 1606181851, 1606190732, 1606191848, 1606200728, 1606201844, 1606210725, 1606211841, 1606220721, 1606221838, 1606230717, 1606231834, 1606240714, 1606241831, 1606250710, 1606251828, 1606260707, 1606261824, 1606270703, 1606271821, 1606280659, 1606281818, 1606290656, 1606291814, 1606300652, 1606301811, 
  1607010649, 1607011808, 1607020645, 1607021804, 1607030641, 1607031801, 1607040638, 1607041758, 1607050634, 1607051755, 1607060631, 1607061751, 1607070627, 1607071748, 1607080624, 1607081745, 1607090620, 1607091742, 1607100616, 1607101739, 1607110613, 1607111735, 1607120609, 1607121732, 1607130606, 1607131729, 1607140602, 1607141726, 1607150559, 1607151723, 1607160555, 1607161719, 1607170552, 1607171716, 1607180548, 1607181713, 1607190545, 1607191710, 1607200541, 1607201707, 1607210538, 1607211704, 1607220534, 1607221701, 1607230531, 1607231658, 1607240527, 1607241654, 1607250524, 1607251651, 1607260520, 1607261648, 1607270517, 1607271645, 1607280513, 1607281642, 1607290510, 1607291639, 1607300506, 1607301636, 1607310503, 1607311633
};

const PROGMEM uint32_t saturn[] = {
  1604241543, 1604250534, 1604251539, 1604260530, 1604261535, 1604270526, 1604271530, 1604280522, 1604281526, 1604290518, 1604291522, 1604300513, 1604301518, 
  1605010509, 1605011514, 1605020505, 1605021510, 1605030501, 1605031506, 1605040457, 1605041501, 1605050452, 1605051457, 1605060448, 1605061453, 1605070444, 1605071449, 1605080440, 1605081445, 1605090436, 1605091441, 1605100431, 1605101436, 1605110427, 1605111432, 1605120423, 1605121428, 1605130419, 1605131424, 1605140414, 1605141420, 1605150410, 1605151416, 1605160406, 1605161411, 1605170402, 1605171407, 1605180357, 1605181403, 1605190353, 1605191359, 1605200349, 1605201355, 1605210345, 1605211350, 1605220340, 1605221346, 1605230336, 1605231342, 1605240332, 1605241338, 1605250328, 1605251334, 1605260323, 1605261329, 1605270319, 1605271325, 1605280315, 1605281321, 1605290311, 1605291317, 1605300306, 1605301312, 1605310302, 1605311308, 
  1606010258, 1606011304, 1606020254, 1606021300, 1606030249, 1606031256, 1606040245, 1606041251, 1606050241, 1606051247, 1606060236, 1606061243, 1606070232, 1606071239, 1606080228, 1606081234, 1606090224, 1606091230, 1606100219, 1606101226, 1606110215, 1606111222, 1606120211, 1606121218, 1606130207, 1606131213, 1606140202, 1606141209, 1606150158, 1606151205, 1606160154, 1606161201, 1606170150, 1606171157, 1606180145, 1606181152, 1606190141, 1606191148, 1606200137, 1606201144, 1606210133, 1606211140, 1606220128, 1606221136, 1606230124, 1606231131, 1606240120, 1606241127, 1606250116, 1606251123, 1606260111, 1606261119, 1606270107, 1606271115, 1606280103, 1606281110, 1606290059, 1606291106, 1606300055, 1606301102, 
  1607010050, 1607011058, 1607020046, 1607021054, 1607030042, 1607031050, 1607040038, 1607041045, 1607050034, 1607051041, 1607060029, 1607061037, 1607070025, 1607071033, 1607080021, 1607081029, 1607090017, 1607091025, 1607100013, 1607101021, 1607110009, 1607111016, 1607120004, 1607121012, 1607130000, 1607131008, 1607132356, 1607141004, 1607142352, 1607151000, 1607152348, 1607160956, 1607162344, 1607170952, 1607172340, 1607180948, 1607182336, 1607190944, 1607192331, 1607200939, 1607202327, 1607210935, 1607212323, 1607220931, 1607222319, 1607230927, 1607232315, 1607240923, 1607242311, 1607250919, 1607252307, 1607260915, 1607262303, 1607270911, 1607272259, 1607280907, 1607282255, 1607290903, 1607292251, 1607300859, 1607302247, 1607310855, 1607312243
};

const PROGMEM uint32_t uranus[] = {
  1604240127, 1604241237, 1604250123, 1604251233, 1604260120, 1604261230, 1604270116, 1604271226, 1604280112, 1604281222, 1604290109, 1604291218, 1604300105, 1604301215, 
  1605010101, 1605011211, 1605020057, 1605021207, 1605030054, 1605031203, 1605040050, 1605041159, 1605050046, 1605051156, 1605060043, 1605061152, 1605070039, 1605071148, 1605080035, 1605081144, 1605090032, 1605091140, 1605100028, 1605101137, 1605110024, 1605111133, 1605120021, 1605121129, 1605130017, 1605131125, 1605140013, 1605141121, 1605150010, 1605151118, 1605160006, 1605161114, 1605170002, 1605171110, 1605172359, 1605181106, 1605182355, 1605191102, 1605192351, 1605201059, 1605202347, 1605211055, 1605212344, 1605221051, 1605222340, 1605231047, 1605232336, 1605241043, 1605242333, 1605251040, 1605252329, 1605261036, 1605262325, 1605271032, 1605272321, 1605281028, 1605282318, 1605291024, 1605292314, 1605301021, 1605302310, 1605311017, 1605312307, 
  1606011013, 1606012303, 1606021009, 1606022259, 1606031005, 1606032255, 1606041002, 1606042252, 1606050958, 1606052248, 1606060954, 1606062244, 1606070950, 1606072240, 1606080946, 1606082237, 1606090942, 1606092233, 1606100939, 1606102229, 1606110935, 1606112225, 1606120931, 1606122222, 1606130927, 1606132218, 1606140923, 1606142214, 1606150919, 1606152210, 1606160916, 1606162207, 1606170912, 1606172203, 1606180908, 1606182159, 1606190904, 1606192155, 1606200900, 1606202151, 1606210856, 1606212148, 1606220852, 1606222144, 1606230849, 1606232140, 1606240845, 1606242136, 1606250841, 1606252132, 1606260837, 1606262129, 1606270833, 1606272125, 1606280829, 1606282121, 1606290825, 1606292117, 1606300822, 1606302113, 
  1607010818, 1607012110, 1607020814, 1607022106, 1607030810, 1607032102, 1607040806, 1607042058, 1607050802, 1607052054, 1607060758, 1607062050, 1607070755, 1607072047, 1607080751, 1607082043, 1607090747, 1607092039, 1607100743, 1607102035, 1607110739, 1607112031, 1607120735, 1607122027, 1607130731, 1607132023, 1607140727, 1607142020, 1607150723, 1607152016, 1607160719, 1607162012, 1607170716, 1607172008, 1607180712, 1607182004, 1607190708, 1607192000, 1607200704, 1607201956, 1607210700, 1607211952, 1607220656, 1607221948, 1607230652, 1607231944, 1607240648, 1607241941, 1607250644, 1607251937, 1607260640, 1607261933, 1607270636, 1607271929, 1607280633, 1607281925, 1607290629, 1607291921, 1607300625, 1607301917, 1607310621, 1607311913
 };

const PROGMEM uint32_t neptune[] = {
  1604242213, 1604251050, 1604252210, 1604261046, 1604262206, 1604271042, 1604272202, 1604281038, 1604282158, 1604291034, 1604292154, 1604301030, 1604302150, 
  1605011027, 1605012147, 1605021023, 1605022143, 1605031019, 1605032139, 1605041015, 1605042135, 1605051011, 1605052131, 1605061007, 1605062127, 1605071003, 1605072124, 1605080959, 1605082120, 1605090956, 1605092116, 1605100952, 1605102112, 1605110948, 1605112108, 1605120944, 1605122104, 1605130940, 1605132101, 1605140936, 1605142057, 1605150932, 1605152053, 1605160928, 1605162049, 1605170924, 1605172045, 1605180921, 1605182041, 1605190917, 1605192037, 1605200913, 1605202033, 1605210909, 1605212030, 1605220905, 1605222026, 1605230901, 1605232022, 1605240857, 1605242018, 1605250853, 1605252014, 1605260849, 1605262010, 1605270846, 1605272006, 1605280842, 1605282002, 1605290838, 1605291959, 1605300834, 1605301955, 1605310830, 1605311951, 
  1606010826, 1606011947, 1606020822, 1606021943, 1606030818, 1606031939, 1606040814, 1606041935, 1606050810, 1606051931, 1606060806, 1606061927, 1606070802, 1606071923, 1606080759, 1606081919, 1606090755, 1606091916, 1606100751, 1606101912, 1606110747, 1606111908, 1606120743, 1606121904, 1606130739, 1606131900, 1606140735, 1606141856, 1606150731, 1606151852, 1606160727, 1606161848, 1606170723, 1606171844, 1606180719, 1606181840, 1606190715, 1606191836, 1606200711, 1606201832, 1606210707, 1606211828, 1606220704, 1606221824, 1606230700, 1606231820, 1606240656, 1606241816, 1606250652, 1606251812, 1606260648, 1606261809, 1606270644, 1606271805, 1606280640, 1606281801, 1606290636, 1606291757, 1606300632, 1606301753, 
  1607010628, 1607011749, 1607020624, 1607021745, 1607030620, 1607031741, 1607040616, 1607041737, 1607050612, 1607051733, 1607060608, 1607061729, 1607070604, 1607071725, 1607080600, 1607081721, 1607090556, 1607091717, 1607100552, 1607101713, 1607110548, 1607111709, 1607120544, 1607121705, 1607130540, 1607131701, 1607140536, 1607141657, 1607150533, 1607151653, 1607160529, 1607161649, 1607170525, 1607171645, 1607180521, 1607181641, 1607190517, 1607191637, 1607200513, 1607201633, 1607210509, 1607211629, 1607220505, 1607221625, 1607230501, 1607231621, 1607240457, 1607241617, 1607250453, 1607251613, 1607260449, 1607261609, 1607270445, 1607271605, 1607280441, 1607281601, 1607290437, 1607291556, 1607300433, 1607301552, 1607310429, 1607311548
};

const PROGMEM uint32_t pluto[] = {
  1604241759, 1604250750, 1604251755, 1604260746, 1604261751, 1604270742, 1604271747, 1604280738, 1604281743, 1604290734, 1604291739, 1604300730, 1604301735, 
  1605010727, 1605011731, 1605020723, 1605021727, 1605030719, 1605031723, 1605040715, 1605041719, 1605050711, 1605051715, 1605060707, 1605061711, 1605070703, 1605071707, 1605080659, 1605081703, 1605090655, 1605091659, 1605100651, 1605101655, 1605110647, 1605111651, 1605120643, 1605121647, 1605130639, 1605131643, 1605140635, 1605141639, 1605150631, 1605151635, 1605160627, 1605161631, 1605170623, 1605171627, 1605180619, 1605181623, 1605190615, 1605191619, 1605200611, 1605201615, 1605210607, 1605211611, 1605220603, 1605221607, 1605230559, 1605231603, 1605240555, 1605241559, 1605250551, 1605251555, 1605260547, 1605261551, 1605270543, 1605271547, 1605280539, 1605281543, 1605290535, 1605291539, 1605300531, 1605301535, 1605310527, 1605311531, 
  1606010523, 1606011527, 1606020519, 1606021523, 1606030515, 1606031519, 1606040511, 1606041515, 1606050507, 1606051511, 1606060503, 1606061507, 1606070459, 1606071503, 1606080455, 1606081459, 1606090451, 1606091455, 1606100447, 1606101451, 1606110443, 1606111447, 1606120439, 1606121443, 1606130435, 1606131439, 1606140431, 1606141435, 1606150427, 1606151431, 1606160423, 1606161427, 1606170419, 1606171423, 1606180415, 1606181419, 1606190411, 1606191415, 1606200407, 1606201411, 1606210403, 1606211407, 1606220359, 1606221403, 1606230355, 1606231359, 1606240351, 1606241354, 1606250347, 1606251350, 1606260343, 1606261346, 1606270339, 1606271342, 1606280335, 1606281338, 1606290331, 1606291334, 1606300327, 1606301330, 
  1607010323, 1607011326, 1607020319, 1607021322, 1607030315, 1607031318, 1607040311, 1607041314, 1607050307, 1607051310, 1607060303, 1607061306, 1607070259, 1607071302, 1607080255, 1607081258, 1607090251, 1607091254, 1607100247, 1607101250, 1607110243, 1607111246, 1607120239, 1607121242, 1607130235, 1607131238, 1607140231, 1607141233, 1607150227, 1607151229, 1607160223, 1607161225, 1607170219, 1607171221, 1607180214, 1607181217, 1607190210, 1607191213, 1607200206, 1607201209, 1607210202, 1607211205, 1607220158, 1607221201, 1607230154, 1607231157, 1607240150, 1607241153, 1607250146, 1607251149, 1607260142, 1607261145, 1607270138, 1607271141, 1607280134, 1607281137, 1607290130, 1607291133, 1607300126, 1607301129, 1607310122, 1607311125
};





void checkArray(const uint32_t *planet, int planetLength) {
  for (int i = 0; i < planetLength; i++) {
    Serial.print("pluto[");
    Serial.print(i);
    Serial.print("]: ");
    Serial.println(pgm_read_dword_near(&planet[i]), DEC);
  }
}

int checker(long DATE, const uint32_t *planet, int planetDataLength) {
//    Serial.println("Inside checker()");
    int currentValue = 0;
    int i;
    for (i=0; i < planetDataLength; i++) {
        horizonTimeLong = pgm_read_dword_near(&planet[i]);
        if (horizonTimeLong <= DATE) {
            lastEvent = horizonTimeLong;
            if (i % 2 == 0) {
              currentValue = 0;
            } else {
              currentValue = 1;
            }
/*            Serial.print("lastEvent already happened: ");
            Serial.print(lastEvent);
            Serial.print(" : ");
            Serial.println(horizonTimeLong);
            Serial.print("currentValue is ");
            Serial.println(currentValue);
*/
        }
    }
    
    return currentValue;

}


// Gets the date and time from the ds1307
void getDateDs1307(long *second, long *minute, long *hour, long *dayOfWeek, long *dayOfMonth, long *month, long *year) {
  // Reset the register pointer
  Wire.beginTransmission(DS1307_I2C_ADDRESS);
  Wire.write(0);
  Wire.endTransmission();
  Wire.requestFrom(DS1307_I2C_ADDRESS, 7);

  // A few of these need masks because certain bits are control bits
  *second     = bcdToLong(Wire.read() & 0x7f);
  *minute     = bcdToLong(Wire.read());
  *hour       = bcdToLong(Wire.read() & 0x3f);  // Need to change this if 12 hour am/pm
  *dayOfWeek  = bcdToLong(Wire.read());
  *dayOfMonth = bcdToLong(Wire.read());
  *month      = bcdToLong(Wire.read());
  *year       = bcdToLong(Wire.read());
}

// Convert normal decimal numbers to binary coded decimal
byte decToBcd(byte val) {
 return ( (val/10*16) + (val%10) );
}

// Convert binary coded decimal to normal decimal numbers
byte bcdToDec(byte val) {
  return ( (val/16*10) + (val%16) );
}

// Convert binary coded decimal to normal decimal numbers
long bcdToLong(byte val) {
  return ( (val/16*10) + (val%16) );
}






void testMotors() {
  for (servonum = 0; servonum < 10; servonum++) {
    Serial.print("Testing motor ");
    Serial.println(servonum);
    for (uint16_t pulselen = SERVOMIN; pulselen < SERVOMAX; pulselen++) {
      pwm.setPWM(servonum, 0, pulselen);
    }
  
    delay(500);
    for (uint16_t pulselen = SERVOMAX; pulselen > SERVOMIN; pulselen--) {
      pwm.setPWM(servonum, 0, pulselen);
    }
  
    delay(500);
  }
}













void setup() {
  Serial.begin(9600);

  Serial.println("Initialize servos.");
  pwm.begin();
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates
  // Initialize DS3231
  Serial.println("Initialize DS3231 clock");
  clock.begin();
  Serial.println("Testing motors...");
  testMotors();
//  checkArray(&pluto, plutoLength);
  
}


void loop() {

  long second, minute, hour, dayOfWeek, dayOfMonth, month, year;

  int thisPlanetPosition;

  getDateDs1307(&second, &minute, &hour, &dayOfWeek, &dayOfMonth, &month, &year);

  Serial.print(hour, DEC);
  Serial.print(":");
  if (minute < 10) {
      Serial.print("0");
  }
  Serial.print(minute, DEC);
  Serial.print(":");
  if (second < 10) {
      Serial.print("0");
  }
  Serial.print(second, DEC);
  Serial.print("  ");
  Serial.print(month, DEC);
  Serial.print("/");
  if (dayOfMonth < 10) {
      Serial.print("0");
  }
  Serial.print(dayOfMonth, DEC);
  Serial.print("/");
  Serial.print(year + 2000, DEC);
  Serial.print("  Day_of_week:");
  Serial.println(dayOfWeek, DEC);


  convertedDate = year * 100000000;
  convertedDate = convertedDate + (month * 1000000);
  convertedDate = convertedDate + (dayOfMonth * 10000);
  convertedDate = convertedDate + (hour * 100);
  convertedDate = convertedDate + (minute);
  Serial.print("Current time is ");
  Serial.println(convertedDate);

  Serial.println("About to check the planets...");

  thisPlanetPosition = checker(convertedDate, sun, sunParams[0]);
  Serial.print("Sun position is ");
  Serial.println(thisPlanetPosition);
  
  thisPlanetPosition = checker(convertedDate, mercury, mercuryParams[0]);
  Serial.print("Mercury position is ");
  Serial.println(thisPlanetPosition);
  
  thisPlanetPosition = checker(convertedDate, venus, venusParams[0]);
  Serial.print("Venus position is ");
  Serial.println(thisPlanetPosition);
  
  thisPlanetPosition = checker(convertedDate, moon, moonParams[0]);
  Serial.print("Moon position is ");
  Serial.println(thisPlanetPosition);
  
  thisPlanetPosition = checker(convertedDate, mars, marsParams[0]);
  Serial.print("Mars position is ");
  Serial.println(thisPlanetPosition);
  
  thisPlanetPosition = checker(convertedDate, jupiter, jupiterParams[0]);
  Serial.print("Jupiter position is ");
  Serial.println(thisPlanetPosition);
  
  thisPlanetPosition = checker(convertedDate, saturn, saturnParams[0]);
  Serial.print("Saturn position is ");
  Serial.println(thisPlanetPosition);
  
  thisPlanetPosition = checker(convertedDate, uranus, uranusParams[0]);
  Serial.print("Uranus position is ");
  Serial.println(thisPlanetPosition);
  
  thisPlanetPosition = checker(convertedDate, neptune, neptuneParams[0]);
  Serial.print("Neptune position is ");
  Serial.println(thisPlanetPosition);
  
  thisPlanetPosition = checker(convertedDate, pluto, plutoParams[0]);
  Serial.print("Pluto position is ");
  Serial.println(thisPlanetPosition);
  
  delay(5000);

  
  //DEBUGGING
  
/*
    Serial.println("clock goes here");
    dt = clock.getDateTime();
    Serial.print("Raw data: ");
    Serial.print(dt.year);   Serial.print("-");
    Serial.print(dt.month);  Serial.print("-");
    Serial.print(dt.day);    Serial.print(" ");
    Serial.print(dt.hour);   Serial.print(":");
    Serial.print(dt.minute); Serial.print(":");
    Serial.print(dt.second); Serial.println("");
*/
}   // end of loop()






